
ui <- fluidPage(
    title = 'Download a PDF report',
    sidebarLayout(
        sidebarPanel(
            helpText(),
            selectInput('x', 'Build a regression model of mpg against:',
                        choices = names(mtcars)[-1]),
            radioButtons('format', 'Document format', c('PDF', 'HTML', 'Word'),
                         inline = TRUE),
            downloadButton('downloadReport')
        ),
        mainPanel(
            plotOutput('regPlot')
        )
    )
)





server <- function(input, output) {

    regFormula <- reactive({
        as.formula(paste('mpg ~', input$x))
    })

    output$regPlot <- renderPlot({
        par(mar = c(4, 4, .1, .1))
        plot(regFormula(), data = mtcars, pch = 19)
    })

    output$downloadReport <- downloadHandler(
        filename = function() {
            paste('my-report', sep = '.', switch(
                input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
            ))
        },

        content = function(file) {
            src <- normalizePath('report.Rmd')

            # temporarily switch to the temp dir, in case you do not have write
            # permission to the current working directory
            owd <- setwd(tempdir())
            on.exit(setwd(owd))
            file.copy(src, 'report.Rmd', overwrite = TRUE)

            library(rmarkdown)
            out <- render('report.Rmd', switch(
                input$format,
                PDF = pdf_document(), HTML = html_document(), Word = word_document()
            ))
            file.rename(out, file)
        }
    )

}





shinyApp(ui= ui, server = server)






# shinyApp(
#     ui = fluidPage(
#         sliderInput("slider", "Slider", 1, 100, 50),
#         downloadButton("report", "Generate report")
#     ),
#     server = function(input, output) {
#         output$report <- downloadHandler(
#             # For PDF output, change this to "report.pdf"
#             filename = "report.html",
#             content = function(file) {
#                 # Copy the report file to a temporary directory before processing it, in
#                 # case we don't have write permissions to the current working dir (which
#                 # can happen when deployed).
#                 tempReport <- file.path(tempdir(), "report.Rmd")
#                 file.copy("report.Rmd", tempReport, overwrite = TRUE)
#
#                 # Set up parameters to pass to Rmd document
#                 params <- list(n = input$slider)
#
#                 # Knit the document, passing in the `params` list, and eval it in a
#                 # child of the global environment (this isolates the code in the document
#                 # from the code in this app).
#                 rmarkdown::render(tempReport, output_file = file,
#                                   params = params,
#                                   envir = new.env(parent = globalenv())
#                 )
#             }
#         )
#     }
# )
