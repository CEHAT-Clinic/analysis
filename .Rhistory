lowAqiBound <-  201
highPmBound <-  250.4
lowPmBound <-  150.5
} else if (truncatedPm25 < 350.5) {
highAqiBound <-  400
lowAqiBound <-  301
highPmBound <-  350.4
lowPmBound <-  250.5
} else if (truncatedPm25 < 500.5) {
highAqiBound <-  500
lowAqiBound <-  401
highPmBound <-  500.4
lowPmBound <-  350.5
}
# Values beyond the range are indicated by infinite values
if (truncatedPm25 < 0) {
aqi <-  -Inf
} else if (truncatedPm25 >= 500.5) {
aqi <-  Inf
} else {
aqi <-  indexCalculation(
highAqiBound,
lowAqiBound,
highPmBound,
lowPmBound,
truncatedPm25
)
}
# /* eslint-enable no-magic-numbers */
return (round(aqi, digits = 0))
}
AQIdataframe <- function(myData){
myAQIValues <- lapply(myData[2],aqiFromPm25)
myAQIData <- data.frame(myData$datehour, myAQIValues, myData$humidity,
myData$latitude, myData$longitude)
colnames(myAQIData) <- c("datehour","AQI","humidity","latitude","longitude")
return (myAQIData)
}
test1 <- read.csv("december2020_readings.csv")
myData <- cleanPA(test1)
myAQIData <- AQIdataframe(myData)
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
# library(usethis)
# library(testthat)
# library(devtools)
#devtools:: install_github("CEHAT-Clinic/analysis")
})
cleanPA <- function(data){
time_clean = lubridate::ymd_hms(data$timestamp, tz="America/Los_Angeles")
data$timestamp <- time_clean
data <- data[order(data$timestamp),]
data[,5] <- round(data[,5],5)
data[,6] <- round(data[,6],4)
#throwing out unusable data (by EPA standard)
data$avgPM <- (data$channelAPm25+ data$channelBPm25)/2
data$difference <- abs(data$channelAPm25- data$channelBPm25)
data$pct_difference <- data$difference/ data$avgPM
percent_threshold <- 0.7
raw_threshold <- 5
data <- dplyr::filter(data, difference <= raw_threshold & pct_difference <= percent_threshold)
#EPA correction method for PurpleAir sensors
data$PM2.5 <- 0.534 * data$avgPM - 0.0844 * data$humidity + 5.604
data <- data[,c(1,10,4:6)]
data <- dplyr::filter(data, PM2.5 >= 0)
data
}
toRad <- function(degrees) {
return ((pi*degrees)/180)
}
distance <- function(lat_1,long_1,lat_2,long_2) {
# converting all degrees to radians
lat1 <- toRad(lat_1)
long1 <- toRad(long_1)
lat2 <- toRad(lat_2)
long2 <- toRad(long_2)
# calculating dist using the Haversine Formula
answer <- 2 * asin(sqrt((sin((lat2 - lat1)/2))^2 +
cos(lat1) * cos(lat2)*
(sin((long2 - long1)/2))^2))
# use 6371 instead of 3956 to calculate in kilometers
return (answer*3956)
}
indexCalculation <-function(highIndexBreakpoint,lowIndexBreakpoint,
highConcentrationBreakpoint,lowConcentrationBreakpoint,pm25Concentration){
indexRange <- highIndexBreakpoint - lowIndexBreakpoint
concentrationRange <- highConcentrationBreakpoint - lowConcentrationBreakpoint
rangeRelativeConcentration <- pm25Concentration - lowConcentrationBreakpoint
return (
(indexRange / concentrationRange) * rangeRelativeConcentration +
lowIndexBreakpoint)
}
aqiFromPm25 <- function(pm25Concentration) {
# Source of bound values is Table 6 of the paper at
# https://www.airnow.gov/sites/default/files/2018-05/aqi-technical-assistance-document-may2016.pdf
# EPA formulas require PM 2.5 to be truncated to one decimal place
truncatedPm25 <- floor(10 * pm25Concentration) / 10
aqi <-  0
highAqiBound <-  0
lowAqiBound <-  0
highPmBound <-  0
lowPmBound <-  0
# Assign appropriate bounds
if (truncatedPm25 < 12.1) {
highAqiBound <-  50
lowAqiBound <-  0
highPmBound <-  12
lowPmBound <-  0
} else if (truncatedPm25 < 35.5) {
highAqiBound <-  100
lowAqiBound <-  51
highPmBound <-  35.4
lowPmBound <-  12.1
} else if (truncatedPm25 < 55.5) {
highAqiBound <-  150
lowAqiBound <-  101
highPmBound <-  55.4
lowPmBound <-  35.5
} else if (truncatedPm25 < 150.5) {
highAqiBound <-  200
lowAqiBound <-  151
highPmBound <-  150.4
lowPmBound <-  55.5
} else if (truncatedPm25 < 250.5) {
highAqiBound <-  300
lowAqiBound <-  201
highPmBound <-  250.4
lowPmBound <-  150.5
} else if (truncatedPm25 < 350.5) {
highAqiBound <-  400
lowAqiBound <-  301
highPmBound <-  350.4
lowPmBound <-  250.5
} else if (truncatedPm25 < 500.5) {
highAqiBound <-  500
lowAqiBound <-  401
highPmBound <-  500.4
lowPmBound <-  350.5
}
# Values beyond the range are indicated by infinite values
if (truncatedPm25 < 0) {
aqi <-  -Inf
} else if (truncatedPm25 >= 500.5) {
aqi <-  Inf
} else {
aqi <-  indexCalculation(
highAqiBound,
lowAqiBound,
highPmBound,
lowPmBound,
truncatedPm25
)
}
# /* eslint-enable no-magic-numbers */
return (round(aqi, digits = 0))
}
AQIdataframe <- function(myData){
myAQIValues <- lapply(myData[2],aqiFromPm25)
myAQIData <- data.frame(myData$datehour, myAQIValues, myData$humidity,
myData$latitude, myData$longitude)
colnames(myAQIData) <- c("datehour","AQI","humidity","latitude","longitude")
return (myAQIData)
}
test1 <- read.csv("december2020_readings.csv")
myData <- cleanPA(test1)
myAQIData <- AQIdataframe(myData)
myAQIData
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(ipdw)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
})
# reading the csv file
test1 <- read.csv("december2020_readings.csv")
#cleaned PM2.5 data
myData <- cleanPA(test1)
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(devtools)
devtools::install_github("CEHAT-Clinic/analysis.git")
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(devtools)
devtools::install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
# library(usethis)
# library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
install.packages("usethis")
install.packages("usethis")
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis/")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis/")
})
setwd("~/Desktop/analysis")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
setwd("Desktop/analysis/R/")
setwd("Desktop/analysis/")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis", force = TRUE)
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
# reading the csv file
test1 <- read.csv("december2020_readings.csv")
myData <- test1
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
