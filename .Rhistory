aqi <-  indexCalculation(
highAqiBound,
lowAqiBound,
highPmBound,
lowPmBound,
truncatedPm25
)
}
# /* eslint-enable no-magic-numbers */
return (round(aqi, digits = 0))
}
AQIdataframe <- function(myData){
myAQIValues <- lapply(myData[2],aqiFromPm25)
myAQIData <- data.frame(myData$datehour, myAQIValues, myData$humidity,
myData$latitude, myData$longitude)
colnames(myAQIData) <- c("datehour","AQI","humidity","latitude","longitude")
return (myAQIData)
}
test1 <- read.csv("december2020_readings.csv")
myData <- cleanPA(test1)
myAQIData <- AQIdataframe(myData)
myAQIData
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(ipdw)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
})
# reading the csv file
test1 <- read.csv("december2020_readings.csv")
#cleaned PM2.5 data
myData <- cleanPA(test1)
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(devtools)
devtools::install_github("CEHAT-Clinic/analysis.git")
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(devtools)
devtools::install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
# library(usethis)
# library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
install.packages("usethis")
install.packages("usethis")
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis/")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis/")
})
setwd("~/Desktop/analysis")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
setwd("Desktop/analysis/R/")
setwd("Desktop/analysis/")
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(data.table)
#for the mapping
library(dplyr)
library(gdata)
library(Ecdat)
library(boot)
library(lubridate)
library(gstat)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis", force = TRUE)
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
# reading the csv file
test1 <- read.csv("december2020_readings.csv")
myData <- test1
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(ggplot2)
library(geoR)
library(data.table)
library(gridGraphics)
library(gridExtra)
library(lattice)
#for the mapping
library(dplyr)
library(gdata)
library(sf)
library(tigris)
#you need to let R know to bring in the spatial data as sf objects
options(tigris_class = "sf")
library(tmap)
library(raster)
library(Ecdat)
library(boot)
library(lubridate)
library(caret)
# detach(package:gstat)
library(gstat)
library(Metrics)
library(zoo)
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
suppressPackageStartupMessages({
library(usethis)
library(testthat)
library(devtools)
devtools:: install_github("CEHAT-Clinic/analysis")
library(PurpleAirCEHAT)
})
shiny::runApp()
runApp()
runApp()
jfd
str
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("rstudio/shinytest", ref = "fc80bdbfe68bcd00329d61ef0cea8bc3cee00929")
shiny::runApp()
runApp()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
setwd('R')
devtools::document()
devtools::document()
devtools::document()
library(PurpleAirCEHAT)
devtools::document()
devtools::document()
devtools::document()
runApp('~/Desktop/analysis')
runApp('~/Desktop/analysis')
runApp('~/Desktop/analysis')
library(PurpleAirCEHAT)
aqmd <- read.csv("centralLA_readings.csv")
setwd("analysis")
aqmd <- read.csv("centralLA_readings.csv")
getwd()
setwd('..')
aqmd <- read.csv("centralLA_readings.csv")
messyPA <- read.csv("december2020_readings.csv")
PAfull <- PurpleAirCEHAT::cleanPA(messyPA)
PAhourly <- PurpleAirCEHAT::hourlyPA(PAfull)
PAhourly
PAhourly[PAhourly$names == "Sensor: SCSG_15",]
PAhourly <- PAhourly[PAhourly$names == "Sensor: SCSG_15",]
matchingDays <- PurpleAirCEHAT::matchingDays(PAhourly,aqmd)
aqmd
PAhourly
matchingDays <- PurpleAirCEHAT::matchingDays(PAhourly,aqmd)
otherCitydata <- cleanAQMD(aqmd)
SGdata <- PAhourly
SGdata$timestamp <- strftime(SGdata$timestamp)
nonMatchingDays <- SGdata$timestamp[!SGdata$timestamp %in% otherCitydata$Date.Time]
nonMatchingDays1 <- otherCitydata$Date.Time[!otherCitydata$Date.Time %in% SGdata$timestamp]
`%notin%` <- Negate(`%in%`)
Matching1 <- dplyr::filter(otherCitydata, Date.Time %notin% nonMatchingDays1)
Matching2 <- dplyr::filter(SGdata, timestamp %notin% nonMatchingDays)
Matching1$PM2.5<- round(Matching2$PM2.5,0)
Matching1
View(otherCitydata)
devtools
devtools::document()
runApp()
Matching1
names(Matching1)[1] <- "timestamp"
names(Matching1)[2] <- "otherCityPM"
names(Matching1)[3] <- "southGatePM"
Matching1$otherCityPM <- as.numeric(as.character(Matching1$otherCityPM))
Matching1
devtools::document()
runApp()
PAhourly
matchingDays <- PurpleAirCEHAT::matchingDays(PAhourly,aqmd)
matchingDays
PurpleAirCEHAT::gettingCityName(aqmd)
PurpleAirCEHAT::compareDataDF(matchingDays,nameOfCity)
nameOfCity <- PurpleAirCEHAT::gettingCityName(aqmd)
PurpleAirCEHAT::compareDataDF(matchingDays,nameOfCity)
daysOfMonth <- aggregate(cbind(otherCityPM, southGatePM) ~ lubridate::mday(timestamp),
data = matchingDays,
FUN=mean)
daysOfMonth
names(daysOfMonth)[1] <- "day"
daysOfMonth
daysOfMonth[,"day"]
df2 <- data.frame(day = c(daysOfMonth[,"day"], daysOfMonth[,"day"]),
city = c(rep(nameOfCity, times = length(daysOfMonth$day)),
rep("South Gate",times = length(daysOfMonth$day))),
PM2.5 = c(daysOfMonth[,"otherCityPM"],daysOfMonth[,"southGatePM"]))
df2
names(daysOfMonth)[1] <- "day"
devtools::document()
rm(list = c("matchingDays"))
devtools::document()
runApp()
runApp()
runApp()
PAfull <- PurpleAirCEHAT::cleanPA(messyPA)
PAhourly <- PurpleAirCEHAT::hourlyPA(PAfull)
avgSG <- PurpleAirCEHAT::summarySG(PAhourly)
avgSG
matchingDays <- PurpleAirCEHAT::matchingDays(avgSG,aqmd)
runApp()
devtools::document()
matchingDays <- PurpleAirCEHAT::matchingDays(avgSG,aqmd)
devtools::document()
matchingDays <- PurpleAirCEHAT::matchingDays(avgSG,aqmd)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp('tapp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp('~/Desktop/tapp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
